// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(window, $) {
  $(function() {
    var $setter, Gridsee, Hrule, Mover, Rule, Setter, Timer, Vrule, console, corner, cssClass, elements, head, key, keys, ns, objLength, rules, selectTest, side, zIndex, __Rules, _selected;
    Gridsee = window.Gridsee = {
      origin: {
        x: 0,
        y: 0
      },
      colors: {
        rule: "#f0f"
      }
    };
    key = {};
    rules = {};
    _selected = {};
    console = window.console;
    ns = "gridsee";
    cssClass = {
      rule: "" + ns + "-rule",
      active: "" + ns + "-rule-active",
      ruler: "" + ns + "-ruler"
    };
    elements = {
      body: $(document.body),
      window: $(this),
      wrap: $("<div />", {
        id: "" + ns + "-wrap"
      }).appendTo(document.body),
      headrule: $("<div />", {
        id: "" + ns + "-head-rule",
        "class": cssClass.ruler
      }).appendTo(document.body),
      siderule: $("<div />", {
        id: "" + ns + "-side-rule",
        "class": cssClass.ruler
      }).appendTo(document.body),
      cornerrule: $("<div />", {
        id: "" + ns + "-corner-rule",
        "class": cssClass.ruler
      }).appendTo(document.body),
      rules: function() {
        var arr, rule;
        arr = [];
        for (key in rules) {
          rule = rules[key];
          arr[arr.length] = rule.element;
        }
        return arr;
      },
      selected: function(type) {
        var arr, rule;
        arr = [];
        for (key in _selected) {
          rule = _selected[key];
          if (rule.name === type) {
            arr[arr.length] = rule;
          }
        }
        return arr;
      }
    };
    objLength = function(obj) {
      var size;
      size = 0;
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          size++;
        }
      }
      return size;
    };
    key.compare = function(e, keys) {
      var mod, modList, _i, _len;
      modList = ["alt", "ctrl", "meta", "shift"];
      for (_i = 0, _len = modList.length; _i < _len; _i++) {
        mod = modList[_i];
        mod = "" + mod + "Key";
        if (keys.indexOf(mod) >= 0) {
          if (!e[mod]) {
            return false;
          }
        } else {
          if (e[mod]) {
            return false;
          }
        }
      }
      return true;
    };
    zIndex = {
      base: 10e5,
      activeGuide: 10e5 + 1,
      setter: 10e5 + 2,
      ruler: 10e5 + 3,
      pixelMarker: 10e5 + 4
    };
    keys = {
      up: 38,
      down: 40,
      left: 37,
      right: 39
    };
    __Rules = (function() {

      function __Rules() {}

      __Rules.prototype.get = function() {
        var _this = this;
        return (function() {
          var arr, rule;
          arr = [];
          for (key in _this) {
            rule = _this[key];
            if (rule.element) {
              arr[arr.length] = rule.element;
            }
          }
          return arr;
        })();
      };

      __Rules.prototype.clear = function() {
        return console.log(this);
      };

      return __Rules;

    })();
    selectTest = new __Rules();
    Timer = (function() {

      function Timer() {
        this.tick = function() {};
        this.enabled = false;
        window.requestAnimFrame = (function() {
          return this.requestAnimationFrame || this.webkitRequestAnimationFrame || this.mozRequestAnimationFrame || this.oRequestAnimationFrame || this.msRequestAnimationFrame || function(callback) {
            this.setTimeout(callback, 1000 / 60);
          };
        })();
      }

      Timer.prototype.start = function() {
        var animloop,
          _this = this;
        this.enabled = true;
        animloop = function() {
          if (_this.enabled === true) {
            requestAnimFrame(animloop);
          }
          _this.tick();
        };
        animloop();
      };

      Timer.prototype.stop = function() {
        return this.enabled = false;
      };

      return Timer;

    })();
    Rule = (function() {

      function Rule() {
        var _this = this;
        this.name = "Rule";
        this.selected = false;
        this.id = objLength(rules);
        this.element = $("<div />", {
          "class": cssClass.rule
        }).on("mousedown", function(e) {
          var allTheRightKeys;
          allTheRightKeys = key.compare(e, ["shiftKey", "metaKey"]);
          if (allTheRightKeys) {
            if (_this.selected) {
              _this.deselect.call(_this);
            } else {
              _this.select();
            }
          } else {
            if (!_this.selected) {
              if (!!objLength(_selected)) {
                _this.deselect.call(_selected);
              }
              _this.select();
            }
          }
        });
        this.pos = {
          x: void 0,
          y: void 0
        };
        rules[this.id] = this;
        selectTest[this.id] = this;
        console.log(selectTest("yeah", selectTest.get()));
        this.mover = new Mover(this.element);
        this.mover.init = function(e) {
          var _hrule, _i, _j, _len, _len1, _ref, _ref1, _results, _vrule;
          this.origin = {
            x: e.pageX,
            y: e.pageY
          };
          this.moveThese = {
            x: elements.selected("Hrule"),
            y: elements.selected("Vrule")
          };
          if (this.moveThese.y) {
            _ref = this.moveThese.y;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _vrule = _ref[_i];
              _vrule.dif = e.pageY - _vrule.pos.y;
            }
          }
          if (this.moveThese.x) {
            _ref1 = this.moveThese.x;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              _hrule = _ref1[_j];
              _results.push(_hrule.dif = e.pageX - _hrule.pos.x);
            }
            return _results;
          }
        };
        this.mover.mousemove = function(e) {
          var _hrule, _i, _j, _len, _len1, _ref, _ref1, _results, _vrule;
          if (this.moveThese.y) {
            _ref = this.moveThese.y;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _vrule = _ref[_i];
              _vrule.element.css("top", e.pageY - _vrule.dif);
            }
          }
          if (this.moveThese.x) {
            _ref1 = this.moveThese.x;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              _hrule = _ref1[_j];
              _results.push(_hrule.element.css("left", e.pageX - _hrule.dif));
            }
            return _results;
          }
        };
        this.mover.mouseup = function(e) {
          var _hrule, _i, _j, _len, _len1, _ref, _ref1, _results, _vrule;
          if (this.moveThese.y) {
            _ref = this.moveThese.y;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _vrule = _ref[_i];
              _vrule.pos.y = e.pageY - _vrule.dif;
            }
          }
          if (this.moveThese.x) {
            _ref1 = this.moveThese.x;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              _hrule = _ref1[_j];
              _results.push(_hrule.pos.x = e.pageX - _hrule.dif);
            }
            return _results;
          }
        };
      }

      Rule.prototype.select = function() {
        this.selected = true;
        this.element.addClass(cssClass.active);
        _selected[this.id] = this;
      };

      Rule.prototype.deselect = function() {
        var k, v, _deselect, _results;
        _deselect = function() {
          this.selected = false;
          this.element.removeClass(cssClass.active);
          return delete _selected[this.id];
        };
        if (this === _selected) {
          _results = [];
          for (k in this) {
            v = this[k];
            _results.push(_deselect.call(v));
          }
          return _results;
        } else {
          return _deselect.call(this);
        }
      };

      Rule.prototype["delete"] = function() {};

      return Rule;

    })();
    Vrule = (function(_super) {

      __extends(Vrule, _super);

      function Vrule() {
        Vrule.__super__.constructor.call(this);
        this.name = "Vrule";
        this.element.addClass(this.name).css({
          height: 1,
          left: 0,
          right: 0
        }).appendTo(elements.wrap);
      }

      Vrule.prototype.select = function() {
        Vrule.__super__.select.call(this);
        return this.pos = {
          y: parseInt(this.element.css("top"), 10)
        };
      };

      return Vrule;

    })(Rule);
    Hrule = (function(_super) {

      __extends(Hrule, _super);

      function Hrule() {
        Hrule.__super__.constructor.call(this);
        this.name = "Hrule";
        this.element.addClass(this.name).css({
          width: 1,
          top: 0,
          bottom: 0
        }).appendTo(elements.wrap);
      }

      Hrule.prototype.select = function() {
        Hrule.__super__.select.call(this);
        return this.pos = {
          x: parseInt(this.element.css("left"), 10)
        };
      };

      return Hrule;

    })(Rule);
    Setter = (function(_super) {

      __extends(Setter, _super);

      function Setter() {
        Setter.__super__.constructor.call(this);
        this.el = {};
        this.v = new Vrule();
        this.$v = this.v.element;
        this.h = new Hrule();
        this.$h = this.h.element;
        this.pos = {
          x: void 0,
          y: void 0
        };
        this.prev = {
          x: void 0,
          y: void 0
        };
        this.$v.css({
          "background": "#f0f",
          zIndex: zIndex.setter
        }).hide();
        this.$h.css({
          "background": "#f0f",
          zIndex: zIndex.setter
        }).hide();
        this.tick = function() {
          if (this.pos.x && this.pos.y) {
            if (this.prev.x !== this.pos.x) {
              this.$h.css("left", this.pos.x);
            }
            if (this.prev.x !== this.pos.x) {
              this.$v.css("top", this.pos.y);
            }
          }
          this.prev.x = this.pos.x;
          return this.prev.y = this.pos.y;
        };
      }

      Setter.prototype.start = function() {
        Setter.__super__.start.call(this);
        this.$v.show();
        return this.$h.show();
      };

      Setter.prototype.stop = function() {
        Setter.__super__.stop.call(this);
        this.$v.hide();
        this.$h.hide();
        Gridsee.origin.x = this.pos.x;
        return Gridsee.origin.y = this.pos.y;
      };

      Setter.prototype.update = function(x, y) {
        this.pos.x = x;
        return this.pos.y = y;
      };

      return Setter;

    })(Timer);
    Mover = (function() {

      function Mover($el, trigger) {
        var _this = this;
        this.$el = $el;
        this.init = function() {};
        this.mousemove = function() {};
        this.mouseup = function() {};
        this.$el.on("mousedown." + ns, function(e) {
          e.preventDefault();
          _this.init(e);
          return elements.window.on("mousemove." + ns, function(e) {
            return _this.mousemove(e);
          }).on("mouseup." + ns, function(e) {
            _this.mouseup(e, $el);
            elements.window.off("mousemove." + ns);
            return elements.window.off("mouseup." + ns);
          });
        });
        if (trigger) {
          $el.trigger("mousedown." + ns);
        }
      }

      return Mover;

    })();
    $setter = new Setter();
    corner = new Mover(elements.cornerrule);
    corner.init = function() {
      return $setter.start();
    };
    corner.mousemove = function(e) {
      return $setter.update(e.pageX, e.pageY);
    };
    corner.mouseup = function() {
      return $setter.stop();
    };
    head = new Mover(elements.headrule);
    head.init = function() {
      this.rule = new Vrule();
      this.rule.deselect.call(_selected);
      return this.$rule = this.rule.element;
    };
    head.mousemove = function(e) {
      return this.$rule.css("top", e.pageY);
    };
    head.mouseup = function(e, $el) {
      this.rule.pos.y = $el.pageY;
      return this.rule.select();
    };
    side = new Mover(elements.siderule);
    side.init = function() {
      this.rule = new Hrule();
      this.rule.deselect.call(_selected);
      return this.$rule = this.rule.element;
    };
    side.mousemove = function(e) {
      return this.$rule.css("left", e.pageX);
    };
    side.mouseup = function(e, $el) {
      this.rule.pos.x = $el.pageX;
      return this.rule.select();
    };
    elements.window.on("keydown", function(e) {
      var k, rule, top;
      if (key.compare(e, [])) {
        switch (e.keyCode) {
          case keys.up:
            for (k in _selected) {
              rule = _selected[k];
              if (rule.name === "Vrule") {
                top = parseInt(rule.element.css("top"), 10);
                rule.element.css("top", top - 1);
              }
            }
            break;
          case keys.down:
            for (k in _selected) {
              rule = _selected[k];
              if (rule.name === "Vrule") {
                top = parseInt(rule.element.css("top"), 10);
                rule.element.css("top", top + 1);
              }
            }
            break;
          case keys.left:
            for (k in _selected) {
              rule = _selected[k];
              if (rule.name === "Hrule") {
                top = parseInt(rule.element.css("left"), 10);
                rule.element.css("left", top - 1);
              }
            }
            break;
          case keys.right:
            for (k in _selected) {
              rule = _selected[k];
              if (rule.name === "Hrule") {
                top = parseInt(rule.element.css("left"), 10);
                rule.element.css("left", top + 1);
              }
            }
        }
      }
    });
    elements.body.append(("<style>              ." + cssClass.rule + " {                position    : absolute;                background  : " + Gridsee.colors.rule + ";                z-index     : " + zIndex.base + ";              }              ." + cssClass.rule + ":hover {                cursor      : pointer;              }              ." + cssClass.rule + "." + cssClass.active + " {                background  : #000 !important;                z-index     : " + zIndex.activeGuide + ";              }              ." + cssClass.ruler + " {                z-index     : " + zIndex.ruler + ";                position    : absolute;              }            </style>").replace(/\s/g, ""));
  });
})(window, jQuery);
